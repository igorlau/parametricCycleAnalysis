function RunRealTurbojetAnalysis(app)
% Function that runs when ideal turbojet is selected

% Get the field values
mach = app.RTj_MachNumberEditField.Value;
gammaC = app.RTj_GammaCEditField.Value;
cpC = app.RTj_CpcEditField.Value;
hpr = app.RTj_HprEditField.Value;
Tt4 = app.RTj_Tt4EditField.Value;
FR_value = app.RTj_FlightRegimeEditField.Value;
TempCheckbox = app.RTj_TemperatureCheckbox.Value;
AltCheckbox = app.RTj_AltitudeCheckbox.Value;
gammaT = app.RTj_GammaTEditField.Value;
cpT = app.RTj_CptEditField.Value;
P0P9 = app.RTj_P0P9EditField.Value;
piC = app.RTj_PicEditField.Value;
piDmax = app.RTj_PidmaxEditField.Value;
piB = app.RTj_PibEditField.Value;
piN = app.RTj_PinEditField.Value;
eC = app.RTj_EcEditField.Value;
eT = app.RTj_EtEditField.Value;
etaB = app.RTj_EtabEditField.Value;
etaM = app.RTj_EtamEditField.Value;
afterburner = app.RTj_AfterburnerCheckbox.Value;
Tt7 = app.RTj_Tt7EditField.Value;
gammaAB = app.RTj_GammaABEditField.Value;
cpAB = app.RTj_CpabEditField.Value;
piAB = app.RTj_PiabEditField.Value;
etaAB = app.RTj_EtaabEditField.Value;

% Input Validation
validated_mach = ValidateInputsArray(mach, 'Mach', 'Real Turbojet');
validated_Tt4 = ValidateInputsArray(Tt4, 'Tt4', 'Real Turbojet');
validated_FR_value = ValidateInputsArray(FR_value, 'FlightRegimeValue', 'Real Turbojet');
validated_piC = ValidateInputsArray(piC, 'piC', 'Real Turbojet');

% Conversion to the IS units
converted_cpC = cpC*1000;
converted_cpAB = cpAB*1000;
converted_cpT = cpT*1000;
converted_hpr = hpr*1000;

% Flight Regime Type Check
if (TempCheckbox && ~AltCheckbox)
    flightRegimeType = FlightRegimeInputType.Temperature;
elseif (~TempCheckbox && AltCheckbox)
    flightRegimeType = FlightRegimeInputType.Altitude;
else
    errordlg("Selecione um regime de voo válido", "Erro na seleção do regime de voo de Turbojet Real")
end

% Class assignment
realTurbojet = RealTurbojet(validated_mach,...
    flightRegimeType,...
    validated_FR_value,...
    gammaC,...
    converted_cpC,...
    converted_hpr,...
    validated_Tt4,...
    converted_cpT,...
    gammaT,...
    P0P9,...
    validated_piC,...
    piDmax,...
    piB,...
    piN,...
    eC,...
    eT,...
    etaB,...
    etaM,...
    afterburner,...
    Tt7,...
    converted_cpAB,...
    gammaAB,...
    piAB,...
    etaAB);

% Run Analysis
Tt4_cellArray = num2cell(validated_Tt4);

for i = 1:length(Tt4_cellArray)
    currentTt4 = strcat('T', strrep(num2str(Tt4_cellArray{i}), '.', '_'), 'K');
    if (afterburner)
        [turbojet] = RealTurbojetAnalysis(validated_mach,...
            flightRegimeType,...
            validated_FR_value,...
            gammaC,...
            converted_cpC,...
            converted_hpr,...
            validated_Tt4(i),...
            gammaT,...
            converted_cpT,...
            validated_piC,...
            piDmax,...
            piB,...
            piN,...
            eC,...
            eT,...
            etaB,...
            etaM,...
            P0P9,...
            afterburner,...
            Tt7,...
            gammaAB,...
            converted_cpAB,...
            piAB,...
            etaAB);
    else
        [turbojet] = RealTurbojetAnalysis(validated_mach,...
            flightRegimeType,...
            validated_FR_value,...
            gammaC,...
            converted_cpC,...
            converted_hpr,...
            validated_Tt4(i),...
            gammaT,...
            converted_cpT,...
            validated_piC,...
            piDmax,...
            piB,...
            piN,...
            eC,...
            eT,...
            etaB,...
            etaM,...
            P0P9);
    end
    realTurbojet.Outputs.(currentTt4) = turbojet;
end

app.realTurbojetEngine = realTurbojet;

end

