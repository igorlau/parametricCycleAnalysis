function RunRealTurbofanAnalysis(app)
% Function that runs when ideal turbojet is selected

% Get the field values
mach = app.RTf_MachNumberEditField.Value;
gammaC = app.RTf_GammaCEditField.Value;
cpC = app.RTf_CpcEditField.Value;
hpr = app.RTf_HprEditField.Value;
Tt4 = app.RTf_Tt4EditField.Value;
FR_value = app.RTf_FlightRegimeEditField.Value;
TempCheckbox = app.RTf_TemperatureCheckbox.Value;
AltCheckbox = app.RTf_AltitudeCheckbox.Value;
gammaT = app.RTf_GammaTEditField.Value;
cpT = app.RTf_CptEditField.Value;
P0P9 = app.RTf_P0P9EditField.Value;
P0P19 = app.RTf_P0P19EditField.Value;
BPR = app.RTf_BPREditField.Value;
piC = app.RTf_PicEditField.Value;
piF = app.RTf_PifEditField.Value;
piDmax = app.RTf_PidmaxEditField.Value;
piB = app.RTf_PibEditField.Value;
piN = app.RTf_PinEditField.Value;
piFN = app.RTf_PifnEditField.Value;
eC = app.RTf_EcEditField.Value;
eT = app.RTf_EtEditField.Value;
eF = app.RTf_EfEditField.Value;
etaB = app.RTf_EtabEditField.Value;
etaM = app.RTf_EtamEditField.Value;

% Input Validation
validated_mach = ValidateInputsArray(mach, 'Mach', 'Real Turbofan');
validated_Tt4 = ValidateInputsArray(Tt4, 'Tt4', 'Real Turbofan');
validated_FR_value = ValidateInputsArray(FR_value, 'FlightRegimeValue', 'Real Turbofan');
validated_piC = ValidateInputsArray(piC, 'piC', 'Real Turbofan');
validated_piF = ValidateInputsArray(piF, 'piF', 'Real Turbofan');

if (length(validated_piC) > 1 && length(validated_piF) > 1)
    errordlg("Não é possível variar piC e piF ao mesmo tempo em Turbofan Real", "Erro em Turbofan Real");
end

% Conversion to the IS units
converted_cpC = cpC*1000;
converted_cpT = cpT*1000;
converted_hpr = hpr*1000;

% Flight Regime Type Check
if (TempCheckbox && ~AltCheckbox)
    flightRegimeType = FlightRegimeInputType.Temperature;
elseif (~TempCheckbox && AltCheckbox)
    flightRegimeType = FlightRegimeInputType.Altitude;
else
    errordlg("Selecione um regime de voo válido", "Erro na seleção do regime de voo de Turbofan Real")
end

% Class assignment
realTurbofan = RealTurbofan(validated_mach,...
    flightRegimeType,...
    validated_FR_value,...
    gammaC,...
    converted_cpC,...
    converted_hpr,...
    validated_Tt4,...
    converted_cpT,...
    gammaT,...
    BPR,...
    P0P9,...
    P0P19,...
    validated_piC,...
    validated_piF,...
    piDmax,...
    piB,...
    piN,...
    piFN,...
    eC,...
    eT,...
    eF,...
    etaB,...
    etaM);

% Run Analysis
Tt4_cellArray = num2cell(validated_Tt4);

for i = 1:length(Tt4_cellArray)
    currentTt4 = strcat('T', strrep(num2str(Tt4_cellArray{i}), '.', '_'), 'K');
    
    [turbofan] = RealTurbofanAnalysis(validated_mach,...
        flightRegimeType,...
        validated_FR_value,...
        gammaC,...
        converted_cpC,...
        converted_hpr,...
        validated_Tt4(i),...
        gammaT,...
        converted_cpT,...
        validated_piC,...
        validated_piF,...
        piDmax,...
        piB,...
        piN,...
        piFN,...
        eC,...
        eT,...
        eF,...
        etaB,...
        etaM,...
        P0P9,...
        P0P19,...
        BPR);
    
    realTurbofan.Outputs.(currentTt4) = turbofan;
end

app.realTurbofanEngine = realTurbofan;

end

